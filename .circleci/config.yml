# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
    initialize:
        description: Initilize the gcloud CLI.
        parameters:
            gcloud-service-key:
                default: GCLOUD_SERVICE_KEY
                description: |
                    Name of environment variable storing the full service key JSON file
                    for the Google project.
                type: env_var_name
            google-project-id:
                default: GOOGLE_PROJECT_ID
                description: The Google project ID to connect with via the gcloud CLI.
                type: env_var_name
        steps:
            - orb-tools/check-env-var-param:
                command-name: Checking whether required env vars are set to initialize gcloud CLI...
                param: <<parameters.gcloud-service-key>>,<<parameters.google-project-id>>
            - run:
                command: |
                    # Store service account
                    echo $<<parameters.gcloud-service-key>> > ${HOME}/gcloud-service-key.json

                    # Initialize gcloud CLI
                    gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                    gcloud --quiet config set project $<<parameters.google-project-id>>
                name: Initialize gcloud CLI to connect to Google Cloud
orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
  gcp-cli: circleci/gcp-cli@2.2.0
  orb-tools: circleci/orb-tools@9.3.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  
  build:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    parameters:
            gcloud-service-key:
                default: GCLOUD_SERVICE_KEY
                description: |
                    Name of environment variable storing the full service key JSON file
                    for the Google project.
                type: env_var_name
            google-project-id:
                default: GOOGLE_PROJECT_ID
                description: The Google project ID to connect with via the gcloud CLI.
                type: env_var_name
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      # - node/install-packages:
      #     pkg-manager: yarn 
      - run:
          name: Run Build
          command: npm build
      - initialize:
                gcloud-service-key: <<parameters.gcloud-service-key>>
                google-project-id: <<parameters.google-project-id>>

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
